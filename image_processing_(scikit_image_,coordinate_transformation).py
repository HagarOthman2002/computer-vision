# -*- coding: utf-8 -*-
"""image processing (scikit_image ,coordinate Transformation)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HVS1zMnMJBpk6ixCykU0iGjHKTVSwxxi
"""

!pip install scikit-image

from skimage.io import imread,imsave,imshow
import matplotlib.pyplot as plt

img_camera = imread("/content/cameraman.jpg")
imshow(img_camera)

plt.figure(figsize=(18,5))
imshow(img_camera)
# plt.axis("off")
plt.title("camera man")

plt.show()

img_camera[200,50] #y,x  13 2oryb mn al black

img_camera[100,200] #near to white

type(img_camera)

img_camera.shape

img_camera.size

image_sea = imread("/content/sea.jfif")
imshow(image_sea)
plt.show()

image_sea.shape

image_sea[50,200] #R,G,B

image_sea[75,50] #b

image_sea[175,200] #R

image_sea[175,150] #g

image_sea[:,:,0]  #red chanel only

image_sea[:,:,1] #green chanel

image_sea[:,:,2] #blue chanel

"""#**Transformation**

#translation
"""

from skimage import transform
import numpy as np

translation= transform.SimilarityTransform(matrix = np.array([[1,0,100],
                                                              [0,1,100],
                                                              [0,0,1]]))
##translation = transform.SimilarityTransform(translation=(100,100))

translation

from matplotlib import image
translated_image = transform.warp(image = img_camera , inverse_map=translation)
imshow(translated_image)

from matplotlib import image
translated_image = transform.warp(image = img_camera , inverse_map=translation.inverse) #or -100 instead of inverse
imshow(translated_image)

"""#Rotation"""

Rotation= transform.SimilarityTransform(rotation=np.deg2rad(30))
Rotation

#wrong rotation
rotated_image = transform.warp(image = img_camera , inverse_map=Rotation.inverse)
imshow(rotated_image)

"""#Rotation around the center"""

theta = np.deg2rad(30)
center = np.array(img_camera.shape) // 2

#1-translate to origin
trans = np.array([[1,0,-center[1]],
                  [0,1,-center[0]],
                     [0,0,1]])
#2-rotate
rotation = np.array([[np.cos(theta) , -np.sin(theta) , 0],
                    [np.sin(theta),np.cos(theta),0],
                    [0,0,1]])
#3-translate back
trans_back = np.array([[1,0,center[1]],
                      [0,1,center[0]],
                     [0,0,1]])

#multiply the matrix with the image
transformation_matrix = transform.SimilarityTransform(matrix =np.dot(np.dot(trans_back,rotation),trans))
transformation_matrix

rotated_image = transform.warp(image = img_camera , inverse_map=transformation_matrix.inverse)
imshow(rotated_image)

#another way
#translate to the origin
shifted_transform =  transform.SimilarityTransform(translation=(-center[1],-center[0]))
#rotation
rot_transf = transform.SimilarityTransform(rotation = np.deg2rad(30))
#translate back
inv_shifted_transform = transform.SimilarityTransform(translation= (center[1],center[0]))

transform2 = shifted_transform + rot_transf + inv_shifted_transform
transform2

rotated_image2 = transform.warp(image = img_camera , inverse_map = transform2.inverse)
imshow(rotated_image2)

"""#Scaling"""

scaling_transform = transform.SimilarityTransform(scale=2)
scaled_image2 = transform.warp(image = img_camera , inverse_map = scaling_transform.inverse)
imshow(scaled_image2)

"""**scalling around center**"""

#1-transate to origin
translate = transform.SimilarityTransform(translation=(-center[1],-center[0]))
#2-scaling
scaling = transform.SimilarityTransform(scale=(2,2))
#3-translate back
translate_back = transform.SimilarityTransform(translation=(center[1],center[0]))

transformation_matrix = translate + scaling + translate_back
transformation_matrix

scaled_image = transform.warp(image = img_camera , inverse_map = transformation_matrix.inverse)
imshow(scaled_image)

"""**translation + rotation +Scaling**"""

transform3 =transform.SimilarityTransform( translation=(20,30) ,rotation=np.deg2rad(30),scale=2)
transform3

res = transform.warp(image = img_camera , inverse_map = transform3.inverse)
imshow(res)

"""#resize unit slice"""

imshow(img_camera)

img_camera.shape

res = img_camera[::2, ::2 ]
res

print(img_camera.size)  #1/4
print(res.size)