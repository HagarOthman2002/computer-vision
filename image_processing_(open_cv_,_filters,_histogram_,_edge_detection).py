# -*- coding: utf-8 -*-
"""image processing (open CV , filters, Histogram , edge detection)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G1vcUMMSEgZfiGComQXFfo6F1BAN7MYl
"""

from skimage.io import imread , imshow , imsave
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow

image_sea =imread("/content/sea.jfif")

plt.figure(figsize=(20,20))
plt.subplot(1,4,1)
plt.title("original image")
plt.axis("off")
imshow(image_sea)

plt.subplot(1,4,2)
plt.title("red channel")
plt.axis("off")
imshow(image_sea[:,:,0])

plt.subplot(1,4,3)
plt.title("green channel")
plt.axis("off")
imshow(image_sea[:,:,1])

plt.subplot(1,4,4)
plt.title("blue channel")
plt.axis("off")
imshow(image_sea[:,:,2])

"""#open_CV"""

img = cv2.imread("/content/sea.jfif")
img.shape

cv2_imshow(img)

#convert RGB2 gray scale
gray_img = cv2.cvtColor(img ,cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_img)

#convert to HSV
HSV_img = cv2.cvtColor(img ,cv2.COLOR_BGR2HSV)
cv2_imshow(HSV_img)

"""#**filters**

#mean filter
"""

# Read the image
image = cv2.imread("/content/brain.jpg")

# Apply the mean filter
mean_filtered = cv2.blur(image, (5, 5))

plt.figure(figsize=(10, 5))

# Original image
plt.subplot(1, 2, 1)
plt.title("Original Image")
plt.imshow(image)
plt.axis("off")

# Mean filter image
plt.subplot(1, 2, 2)
plt.title("Mean Filter Image")
plt.imshow(mean_filtered)
plt.axis("off")

plt.show()

"""#gaussian filter"""

# Read the image
image = cv2.imread("/content/brain.jpg")

# Apply the Gaussian filter
Gaussian_filtered = cv2.GaussianBlur(image, (5, 5),0)

plt.figure(figsize=(10, 5))

# Original image
plt.subplot(1, 2, 1)
plt.title("Original Image")
plt.imshow(image)
plt.axis("off")

# Mean filter image
plt.subplot(1, 2, 2)
plt.title("Gaussian Filter Image")
plt.imshow(Gaussian_filtered)
plt.axis("off")

plt.show()

"""#median"""

# Read the image
image = cv2.imread("/content/brain.jpg")

# Apply the Gaussian filter
Median_filtered = cv2.medianBlur(image, 5)

plt.figure(figsize=(10, 5))

# Original image
plt.subplot(1, 2, 1)
plt.title("Original Image")
plt.imshow(image)
plt.axis("off")

# Mean filter image
plt.subplot(1, 2, 2)
plt.title("Median Filter Image")
plt.imshow(Median_filtered)
plt.axis("off")

plt.show()

"""#Histogram

**using numpy**
"""

img = cv2.imread("/content/sea.jfif")
# hist , bins = np.histogram(img.flatten() , bins = 256 , range = [0,255])
hist , bins = np.histogram(img.ravel() , bins = 256 , range = [0,255])

plt.bar(x=range(256) , height=hist)
plt.show()

"""**using CV2**

"""

histogram = cv2.calcHist([img] ,[0]  , None , [256] , [0,256])
plt.plot(histogram)
plt.title("histogram")
plt.show()

"""#Histogram Equalization"""

plt.figure(figsize=(10,5))

img = cv2.imread("/content/cow.jfif")
gray_image = cv2.cvtColor(img , cv2.COLOR_BGR2GRAY)
equalized_img = cv2.equalizeHist(gray_image)

plt.subplot(1,2,1)
plt.title("original image")
plt.imshow(img)
plt.xticks([]) , plt.yticks([])

plt.subplot(1,2,2)
plt.title("equlaized image")
plt.imshow(equalized_img , cmap="gray")
plt.xticks([]) , plt.yticks([])

plt.show()

"""#Edge Detection filters

#robert
"""

#robert edge detection
image = cv2.imread("/content/flower.jfif")
#convert to gray scale
gray_image =cv2.cvtColor(image , cv2.COLOR_BGR2GRAY)
#removing noise
image = cv2.GaussianBlur(gray_image , (3,3) ,0)
#apply robert edge detection
roberts_cross_x = np.array([[1,0],[0,-1]])
roberts_cross_y = np.array([[0,1],[-1,0]])

img_roberts_cross_x = cv2.filter2D(image , -1 , roberts_cross_x)
img_roberts_cross_y = cv2.filter2D(image , -1 , roberts_cross_y)

plt.subplot(1,4,1)
plt.title("original image")
plt.imshow(img , cmap="gray")
plt.axis("off")

plt.subplot(1,4,2)
plt.title("robert x")
plt.imshow(img_roberts_cross_x , cmap="gray")
plt.axis("off")

plt.subplot(1,4,3)
plt.title("robert y")
plt.imshow(img_roberts_cross_y , cmap="gray")
plt.axis("off")

plt.subplot(1,4,4)
plt.title("robert x+y")
plt.imshow(img_roberts_cross_x+img_roberts_cross_y , cmap="gray")
plt.axis("off")
plt.show()

"""#prewit"""

image = cv2.imread("/content/flower.jfif")
#convert to gray scale
gray_image = cv2.cvtColor(image , cv2.COLOR_BGR2GRAY)
#remove noise
img = cv2.GaussianBlur(gray_image , (3,3) , 0)
#edge detection using prewitt
kernelx= np.array([[1,1,1],[0,0,0],[-1,-1,-1]]) #X
kernely= np.array([[-1,0,1],[-1,0,1],[-1,0,1]]) #Y

img_prewittx = cv2.filter2D(image , -1 , kernelx)
img_prewitty = cv2.filter2D(image , -1 , kernely)



plt.subplot(1,4,1)
plt.title("original image")
plt.imshow(img, cmap="gray")
plt.axis("off")


plt.subplot(1,4,2)
plt.title("prewitx")
plt.imshow(img_prewittx ,cmap ="gray")
plt.axis("off")


plt.subplot(1,4,3)
plt.title("prewity")
plt.imshow(img_prewitty, cmap="gray")
plt.axis("off")


plt.subplot(1,4,4)
plt.title("prewitx+prewity")
plt.imshow(img_prewittx+img_prewitty, cmap="gray")
plt.axis("off")
plt.show()

"""#sobel"""

#read image
image = cv2.imread("/content/flower.jfif")
#convert to gray scale
gray_image = cv2.cvtColor(image , cv2.COLOR_BGR2GRAY)
#remove noise
img = cv2.GaussianBlur(gray_image , (3,3) , 0)
#edge detection
sobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
sobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5)

plt.figure(figsize=(10,10))

plt.subplot(1,4,1)
plt.imshow(img, cmap="gray")
plt.title("original image")
plt.axis("off")

plt.subplot(1,4,2)
plt.imshow(sobelx, cmap="gray")
plt.title("sobelx")
plt.axis("off")

plt.subplot(1,4,3)
plt.imshow(sobely, cmap="gray")
plt.title("sobely")
plt.axis("off")

plt.subplot(1,4,4)
plt.imshow(sobelx+sobely, cmap="gray")
plt.title("sobelx+sobely")
plt.axis("off")
plt.show()

"""#canny"""

#read image
img = cv2.imread("/content/flower.jfif")
plt.figure(figsize=(10,10))
Canny_img = cv2.Canny(img,100,200)

plt.subplot(1,2,1)
plt.title("original image")
plt.imshow(img, cmap="gray")
plt.axis("off")

plt.subplot(1,2,2)
plt.title("canny image")
imshow(Canny_img)
plt.axis("off")
plt.show()

"""#laplace operator"""

image = cv2.imread("/content/flower.jfif")
#convert to gray scale
gray_image = cv2.cvtColor(image , cv2.COLOR_BGR2GRAY)
#remove noise
img = cv2.GaussianBlur(gray_image , (3,3) , 0)
#edge detection
laplacian = cv2.Laplacian(img,cv2.CV_64F)

plt.figure(figsize=(10,10))

plt.subplot(1,2,1)
plt.imshow(img, cmap="gray")
plt.title("original image")
plt.axis("off")

plt.subplot(1,2,2)
plt.imshow(laplacian, cmap="gray")
plt.axis("off")
plt.show()

